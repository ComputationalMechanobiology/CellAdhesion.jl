var documenterSearchIndex = {"docs":
[{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"EditURL = \"../src/example_junction.jl\"","category":"page"},{"location":"example_junction/#Example-of-a-junction-with-N-bonds","page":"Example: Single junction","title":"Example of a junction with N bonds","text":"","category":"section"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"using CellAdhesion","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"Plots needs to be installed to run these examples and display plots of the data.","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"using Plots\nusing Statistics","category":"page"},{"location":"example_junction/#Example-1","page":"Example: Single junction","title":"Example 1","text":"","category":"section"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"Define the parameters for the Slip bond model for the junction\nGenerate a junction made of 20 bonds\nRun the simulations for the junction subjected to a constant force within the range 2-10, 50 times for each level of force","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"Define the BondModel to compute the binding-unbinding rate","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"model = SlipBondModel((k_on_0=3e-3,), (k_off_0=3e-4, f_1e=0.055))","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"Define the Cluster data structure parameters","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"N = 20      # Number of bonds\nl = 1.0     # Distance between bonds","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"Define the range of forces to be applied","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"F = [2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0]","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"Run the Montecarlo simulations for different level of forces, 50 times each","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"n = 50             # Number of simulations\nn_f = length(F)    # Number of different forces to apply to the junction\n\ntime_break_F = zeros(n_f)  # Vector with mean rupture time for the different applied forces\n\np = plot()\n\n# For loop on the applied Force (F)\nfor j = 1:1:n_f\n\n    stress_break_v = zeros(n)\n    time_break_v = zeros(n)\n\n    # For loop on the different simulations for each scenario (n)\n    for sim = 1:1:n\n\n        # Initiate the junction (Cluster data structure)\n        x = Cluster(N, l, model, :force_global)\n\n        # Run the Montecarlo simulation until it breaks or it reaches the maximum number of iterations\n        state, stress_break_v[sim], time_break_v[sim], step = runcluster(x, F[j], 0.01, max_steps = 500000)\n\n    end\n\n    # Plot all rupture time for all the simulations\n    scatter!(p, repeat([F[j]],n), time_break_v, label = \"\", mc=:black, ms=4, ma=1)\n\n    # Compute the mean rupture time\n    time_break_F[j] = mean(time_break_v)\nend","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"Plot the average rupture time as a function of the applied force","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"scatter!(p, F.+0.1, time_break_F, label=\"Mean\", mc=:red, ms=4, ma=1)","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"","category":"page"},{"location":"example_junction/","page":"Example: Single junction","title":"Example: Single junction","text":"This page was generated using Literate.jl.","category":"page"},{"location":"architecture/#Architecture","page":"Architecture","title":"Architecture","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"EditURL = \"https://github.com/ComputationalMechanobiology/CellAdhesion.jl/edit/master/docs/src/architecture.md\"","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"CellAdhesion is built around three main data types:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Bond: it is a mutable structure that contains information regarding the state of the bond (open = false or closed = true), the force applied to the bond (f), the model that discribes the dynamics of the bond (binding-unbinding probabilities).\nCluster: it is a mutable structure that contains a unit element vector (this can be of type Bond if the junction is made of one bond cluster, or Cluster if the junction is made of clusters), the state of the cluster (open = false, closed = true), the force applied to the Cluster (f), the model by which the force is distributed within bonds (f_model), the number of unit elements (n), the distance between unit elements (l). ","category":"page"},{"location":"#CellAdhesion","page":"Home","title":"CellAdhesion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tests Documentation\n(Image: Runtests) (Image: Development Documentation)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CellAdhesion is a software package written in the Julia programming language that provides tools for modeling binding-unbinding dynamics of cell adhesion molecules. Features include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Junctions life-span can be computed for different loading histories\nDifferent models for computing the binding and unbinding probabilities are implemented\nJunctions with different adhesion molecules, thus bonds with different properties, can be modeled\nDynamics of junctions with bond clusters can be implemented","category":"page"},{"location":"","page":"Home","title":"Home","text":"EditURL = \"https://github.com/ComputationalMechanobiology/CellAdhesion.jl\"","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"EditURL = \"https://github.com/ComputationalMechanobiology/CellAdhesion.jl/edit/main/docs/src/API.md\"","category":"page"},{"location":"API/#Main-CellAdhesion-data-structures","page":"API","title":"Main CellAdhesion data structures","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Bond\nCluster","category":"page"},{"location":"API/#CellAdhesion.Bond","page":"API","title":"CellAdhesion.Bond","text":"Bond\nBond(state::{Bool}, f::{CellAdhesionFloat}, model)\n\n`Bond` struct contains sate, force and model of a single bond\n\n# Fields\n\n- `state`: false (0)  = open, true (1) = closed\n- `f`: force\n- `t`: time\n- `model`: BondModel describing the bond binding-unbinding dynamics\n\n\n\n\n\n","category":"type"},{"location":"API/#CellAdhesion.Cluster","page":"API","title":"CellAdhesion.Cluster","text":"Cluster(u::Vector{Bond,Cluster}, state::{Bool}, f::{CellAdhesionFloat}, f_model::{Symbol}, n::{CellAdhesionInt}, l::{CellAdhesionFloat})\n\n\n\n\n\n","category":"type"},{"location":"API/#Processing-functions","page":"API","title":"Processing functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CellAdhesion.update!\nruncluster","category":"page"},{"location":"API/#CellAdhesion.update!","page":"API","title":"CellAdhesion.update!","text":"update!(v, dt)\n\nUpdates the state of an interface (that can be made of bonds or it can be a hierarchical structure).\n\nInput parameters:\n\nv: interface (this can be a cluster or a bond)\ndt: time step of the simulation\n\n\n\n\n\n","category":"function"},{"location":"API/#CellAdhesion.runcluster","page":"API","title":"CellAdhesion.runcluster","text":"runcluster(v, force, dt::Float64; max_steps::Integer = 1000, verbose::Bool = false)\n\nSimulates a junction subjected to an external force using a Montecarlo algorithm. \n\nInput paramters:\n\nv: structure of type Cluster\nforce: it can either be an constant number (if the junction is subjected to a constant force), or a vector (if the junction is subjected to a varing force)\ndt: time step for the simulation\nmax_steps: maximum number of iterations if the junction doesn't break\n\nOutput paramters:\n\nstate of the whole Cluster \nforce at which it breaks\ntime at which it breaks\nnumber of steps after which it breaks\n\n\n\n\n\n","category":"function"},{"location":"API/#Utility-functions","page":"API","title":"Utility functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CellAdhesion.state!\nprint_cluster","category":"page"},{"location":"API/#CellAdhesion.state!","page":"API","title":"CellAdhesion.state!","text":"state!(v)\n\nUpdates the state field of a Cluster or a Bond. When all the subunits are open, then the state of the structure is set to open. Otherwise, it is close.   \n\nInput paramters:\n\nv: interface that can either be a Cluster or a Bond. \n\n\n\n\n\n","category":"function"},{"location":"API/#CellAdhesion.print_cluster","page":"API","title":"CellAdhesion.print_cluster","text":"print_cluster(x)\n\nNice screen print of Cluster structure or Bond (x)\n\n\n\n\n\n","category":"function"},{"location":"API/#Dynamics-functions","page":"API","title":"Dynamics functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"setforce!\nCellAdhesion.force_global\nCellAdhesion.force_local\nCellAdhesion.distance","category":"page"},{"location":"API/#CellAdhesion.setforce!","page":"API","title":"CellAdhesion.setforce!","text":"setforce!(v::Cluster{Bond{T}}, F::CellAdhesionFloat)\n\nInput parameters:\n\nv: Cluster structure\nF: Force applied to the cluster\n\nOutput parameters:\n\nUpdated the force applied to each Cluster structure (within the hierarchical structure)\n\n\n\n\n\n","category":"function"},{"location":"API/#CellAdhesion.force_global","page":"API","title":"CellAdhesion.force_global","text":"force_global(v::Cluster)\n\nComputer force distribution by equally dividing the force within the closed bonds\n\n\n\n\n\n","category":"function"},{"location":"API/#CellAdhesion.force_local","page":"API","title":"CellAdhesion.force_local","text":"force_local(v::Cluster)\n\nComputer force distribution by accounting for the distance of each link from its two closest neighbours\n\n\n\n\n\n","category":"function"},{"location":"API/#CellAdhesion.distance","page":"API","title":"CellAdhesion.distance","text":"distance(v::BitVector, n::Integer)\n\nCompute the distance of each from its two closest closed link on each side.  Used to compute a \"local\" load distributions across closed bonds. Periodic bondary conditions for the edges.\n\nInput parameters:\n\nv: vector with the state of each single bond\nn: number of bonds in the interface\n\nOutput parameters:\n\nl: vector of CellAdhesionFloat containing the distance for each closed bond\n\n\n\n\n\n","category":"function"}]
}
