var documenterSearchIndex = {"docs":
[{"location":"architecture/#Architecture","page":"Architecture","title":"Architecture","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"EditURL = \"https://github.com/ComputationalMechanobiology/CellAdhesion.jl/edit/master/docs/src/architecture.md\"","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"CellAdhesion is built around three main data types:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Bond: it is a mutable structure that contains information regarding the state of the bond (open = false or closed = true), the force applied to the bond (f), the model that discribes the dynamics of the bond (binding-unbinding probabilities).\nCluster: it is a mutable structure that contains a unit element vector (this can be of type Bond if the junction is made of one bond cluster, or Cluster if the junction is made of clusters), the state of the cluster (open = false, closed = true), the force applied to the Cluster (f), the model by which the force is distributed within bonds (f_model), the number of unit elements (n), the distance between unit elements (l). ","category":"page"},{"location":"#CellAdhesion","page":"Home","title":"CellAdhesion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tests Documentation\n(Image: Runtests) (Image: Development Documentation)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CellAdhesion is a software package written in the Julia programming language that provides tools for modeling binding-unbinding dynamics of cell adhesion molecules. Features include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Junctions life-span can be computed for different loading histories\nDifferent models for computing the binding and unbinding probabilities are implemented\nJunctions with different adhesion molecules, thus bonds with different properties, can be modeled\nDynamics of junctions with bond clusters can be implemented","category":"page"},{"location":"","page":"Home","title":"Home","text":"EditURL = \"https://github.com/ComputationalMechanobiology/CellAdhesion.jl\"","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"EditURL = \"https://github.com/ComputationalMechanobiology/CellAdhesion.jl/edit/main/docs/src/API.md\"","category":"page"},{"location":"API/#Main-CellAdhesion-data-structures","page":"API","title":"Main CellAdhesion data structures","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Bond\nCluster","category":"page"},{"location":"API/#CellAdhesion.Bond","page":"API","title":"CellAdhesion.Bond","text":"Bond\nBond(state::{Bool}, f::{CellAdhesionFloat}, model)\n\n`Bond` struct contains sate, force and model of a single bond\n\n# Fields\n\n- `state`: false (0)  = open, true (1) = closed\n- `f`: force\n- `t`: time\n- `model`: BondModel describing the bond binding-unbinding dynamics\n\n\n\n\n\n","category":"type"},{"location":"API/#CellAdhesion.Cluster","page":"API","title":"CellAdhesion.Cluster","text":"Cluster(u::Vector{Bond,Cluster}, state::{Bool}, f::{CellAdhesionFloat}, f_model::{Symbol}, n::{CellAdhesionInt}, l::{CellAdhesionFloat})\n\n\n\n\n\n","category":"type"},{"location":"API/#dynamics.jl-functions","page":"API","title":"dynamics.jl functions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"setforce!\nCellAdhesion.force_global\nCellAdhesion.force_local\nCellAdhesion.distance","category":"page"},{"location":"API/#CellAdhesion.setforce!","page":"API","title":"CellAdhesion.setforce!","text":"setforce!(v::Cluster{Bond{T}}, F::CellAdhesionFloat)\n\nInput parameters:     - v: Interface structure     - F: Force applied to the cluster   Output parameters:     - Updated Interface with force applied to each link\n\n\n\n\n\n","category":"function"},{"location":"API/#CellAdhesion.force_global","page":"API","title":"CellAdhesion.force_global","text":"force_global Computer force distribution by equally dividing the force within the closed bonds\n\n\n\n\n\n","category":"function"},{"location":"API/#CellAdhesion.force_local","page":"API","title":"CellAdhesion.force_local","text":"force_local Computer force distribution by accounting for the distance of each link from its two closest neighbours\n\n\n\n\n\n","category":"function"},{"location":"API/#CellAdhesion.distance","page":"API","title":"CellAdhesion.distance","text":"distance(v::BitVector, n::Integer)\n\nCompute the distance of each from its two closest closed link on each side.    Used to compute a \"local\" load distributions across closed bonds.   Periodic bondary conditions for the edges.\n\nInput parameters:     - v: vector with the state of each single bond     - n: number of bonds in the junction   Output parameters:     - l: vector of CellAdhesionFloat containing the distance for each closed bond\n\n\n\n\n\n","category":"function"}]
}
